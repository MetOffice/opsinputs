window begin: 2018-01-01T00:00:00Z
window end: 2018-01-01T01:00:00Z

observations:
  - obs space:
      name: Sonde
      obsdatain:
        obsfile: Data/004_VarField_u_Sonde.nc4
        obsgrouping:
          group variables: [ "station_id" ]
          sort variable: "air_pressure"
          sort order: "descending"
      simulated variables: [eastward_wind]
    obs filters:
    # Double all observation errors: we want to check if error changes made by filters are
    # propagated to VarObs files
    - filter: BlackList
      where:
      - variable:
          name: eastward_wind@ObsErrorData
        is_defined:
      action:
        name: inflate error
        inflation factor: 2.0
    # Set the flag of observations with missing values to "pass": we want to check if these
    # values are encoded correctly in the VarObsFile.
    - filter: Reset Flags to Pass
      flags_to_reset: [10, 15]  # missing, Hfailed
    # Reject records 1, 3 and 5: we want to check if they're omitted from the VarObs file,
    # as expected.
    - filter: RejectList
      where:
      - variable:
          name: station_id@MetaData
        is_in: [station_1, station_3, station_5]
    - filter: VarObs Writer
      reject_obs_with_any_variable_failing_qc: true
      general_mode: debug
    - filter: VarObs Checker
      expected_main_table_columns:
        # Only records 2 and 4 are passed; the others are rejected by the
        # RejectList filter above.
        # In the arrays below, rows denote locations and columns levels.
        field:    ["4", "4", "4",
                   "4", "4", "4"]
        level:    ["1", "2", "3",
                   "1", "2", "3"]
        # Record 2 (first row) contains 3 levels, whereas record 4 (second row) contains only 2.
        # But in the VarObs file all observations need to have the same number of levels, so the
        # observation corresponding to record 4 is padded with missing values. In addition, the
        # input file contains a missing ObsValue at the first location from record 4 (this is
        # "propagated" to the ObsError by the VarObs writer) and a missing ObsError at the first
        # location from record 2.
        ob value: ["0.21000",           "0.22000",           "0.23000",
                   "-1073741824.00000", "0.42000", "-1073741824.00000" ]
        ob error: ["-1073741824.00000", "0.04400",           "0.04600",
                   "-1073741824.00000", "0.08400", "-1073741824.00000" ]
        lat:      ["-21.00000", "-21.00000", "-21.00000",
                   "-41.00000", "-41.00000", "-41.00000" ]
        lon:      ["21.00000", "21.00000", "21.00000",
                   "41.00000", "41.00000", "41.00000"]
        time:     ["-1679.00000", "-1679.00000", "-1679.00000",
                   "-1559.00000", "-1559.00000", "-1559.00000"]
        Callsign: ["station_2", "station_2", "station_2",
                   "station_4", "station_4", "station_4"]
    HofX: ObsValue # just a placeholder -- not used, but needed to force calls to postFilter.
    benchmarkFlag: 1000 # just to keep the ObsFilters test happy
    flaggedBenchmark: 0

window begin: 2018-01-01T00:00:00Z
window end: 2018-01-01T01:00:00Z

observations:
  - obs space:
      name: Surface
      obsdatain:
        obsfile: Data/002_VarField_temperature_Surface.nc4
      simulated variables: [air_temperature]
    obs filters:
    # Double all observation errors: we want to check if error changes made by filters are
    # propagated to VarObs files
    - filter: BlackList
      action:
        name: inflate error
        inflation factor: 2.0
    # Set the flag of observations with missing values to "pass": we want to check if these
    # values are encoded correctly in the VarObsFile.
    - filter: Reset Flags to Pass
      flags_to_reset: [10, 15]  # missing, Hfailed
    # Reject observation 3: we want to check if it is omitted from the VarObs file, as expected.
    - filter: Domain Check
      where:
      - variable:
          name: latitude@MetaData
        minvalue: 0.0
    - filter: VarObs Writer
      reject_obs_with_any_variable_failing_qc: true
      general_mode: debug
    - filter: VarObs Checker
      expected_main_table_columns:
        # Only observations 1, 2 and 4 are passed; observation 3 is rejected by the domain check
        field:    ["2", "2", "2"]
        ob value: ["1.10000", "-1073741824.00000", "1.40000"]
        ob error: ["0.20000", "-1073741824.00000", "0.80000"]
        # 1.111 is the missing value indicator for PGEs. VarObs files store PGEs multiplied by 10000.
        pge:      ["100.00000", "11110.00000", "400.00000"]
        lat:      ["21.00000", "22.00000", "24.00000"]
        lon:      ["31.00000", "32.00000", "34.00000"]
        time:     ["-1740.00000", "-1680.00000", "-1560.00000"]
        Callsign: ["station_1", "station_2", "station_4"]
    HofX: ObsValue # just a placeholder -- not used, but needed to force calls to postFilter.
    benchmarkFlag: 1000 # just to keep the ObsFilters test happy
    flaggedBenchmark: 0

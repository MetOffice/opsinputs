---
name: UKMO Container (Manual)

on:
  workflow_dispatch:


concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/develop' }}

env:
  REPO: ${{ github.event.repository.name }}
  PR: pr-${{ github.event.number }}

jobs:
  build1:
    if: github.repository_owner == 'MetOffice'
    name: gnu-openmpi (UKMO)
    runs-on: jedi-self-hosted-rg

    steps:
      - name: Pre-submit cleanup
        run: |
          rm -fr ./${{ env.PR }} || true
          ls -lgo ./
      - name: Checkout current
        uses: actions/checkout@v4
        with:
          path: ./${{ env.PR }}/${{ env.REPO }}
      - name: Initiate bundle
        run: cp ./${{ env.PR }}/${{ env.REPO }}/ci/* ./${{ env.PR }}/

      - name: Checkout jedicmake
        uses: actions/checkout@v4
        with:
          path: ./${{ env.PR }}/jedicmake
          repository: JCSDA-internal/jedi-cmake
          submodules: true
          token: ${{ secrets.GH_PAT }}

      - name: Checkout oops
        uses: actions/checkout@v4
        with:
          path: ./${{ env.PR }}/oops
          repository: JCSDA-internal/oops
          token: ${{ secrets.GH_PAT }}
      - name: Check build-group for oops
        if: github.event_name == 'pull_request'
        run: ./${{ env.PR }}/check-build-group.sh ./${{ env.PR }}/oops

      - name: Checkout ioda
        uses: actions/checkout@v4
        with:
          path: ./${{ env.PR }}/ioda
          repository: JCSDA-internal/ioda
          token: ${{ secrets.GH_PAT }}
      - name: Check build-group for ioda
        if: github.event_name == 'pull_request'
        run: ./${{ env.PR }}/check-build-group.sh ./${{ env.PR }}/ioda

      - name: Checkout ufo
        uses: actions/checkout@v4
        with:
          path: ./${{ env.PR }}/ufo
          repository: JCSDA-internal/ufo
          token: ${{ secrets.GH_PAT }}
      - name: Check build-group for ufo
        if: github.event_name == 'pull_request'
        run: ./${{ env.PR }}/check-build-group.sh ./${{ env.PR }}/ufo

      - name: Build and Test
        env:
          # Container environment
          WORKDIR: /var/tmp/${{ env.REPO}}/${{ env.PR }}

        run: |
          az acr login --name ngmssboxjediacr
          docker run --rm \
            --name ${REPO}_${PR}_${GITHUB_SHA::7} \
            --volume ${{ github.workspace }}/${PR}:${WORKDIR} \
            --workdir=${WORKDIR} \
            --entrypoint=${WORKDIR}/build-and-test \
            'ngmssboxjediacr.azurecr.io/jedibase:alma9'

      - name: Cleanup workspace
        working-directory: ${{github.workspace}}
        run: rm -fr ${{ env.PR }} || true
